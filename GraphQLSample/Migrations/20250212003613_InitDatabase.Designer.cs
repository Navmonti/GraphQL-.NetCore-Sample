// <auto-generated />
using GraphQLSample.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphQLSample.Migrations
{
    [DbContext(typeof(SchoolAppDbContext))]
    [Migration("20250212003613_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraphQLSample.Model.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CountryId = 1,
                            Name = "New York"
                        },
                        new
                        {
                            CityId = 2,
                            CountryId = 1,
                            Name = "Los Angeles"
                        },
                        new
                        {
                            CityId = 3,
                            CountryId = 2,
                            Name = "Toronto"
                        });
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Code = "USA",
                            Name = "United States"
                        },
                        new
                        {
                            CountryId = 2,
                            Code = "CAN",
                            Name = "Canada"
                        });
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SchoolId");

                    b.HasIndex("CityId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            SchoolId = 1,
                            CityId = 1,
                            Name = "New York High School"
                        },
                        new
                        {
                            SchoolId = 2,
                            CityId = 2,
                            Name = "Los Angeles Academy"
                        },
                        new
                        {
                            SchoolId = 3,
                            CityId = 3,
                            Name = "Toronto Public School"
                        });
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            FirstName = "John",
                            GradeLevel = 0,
                            LastName = "Doe",
                            Major = 0,
                            SchoolId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            FirstName = "Jane",
                            GradeLevel = 2,
                            LastName = "Smith",
                            Major = 1,
                            SchoolId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            FirstName = "Mike",
                            GradeLevel = 1,
                            LastName = "Johnson",
                            Major = 2,
                            SchoolId = 3
                        },
                        new
                        {
                            StudentId = 4,
                            FirstName = "Emma",
                            GradeLevel = 0,
                            LastName = "Brown",
                            Major = 3,
                            SchoolId = 1
                        },
                        new
                        {
                            StudentId = 5,
                            FirstName = "Liam",
                            GradeLevel = 0,
                            LastName = "Williams",
                            Major = 3,
                            SchoolId = 2
                        },
                        new
                        {
                            StudentId = 6,
                            FirstName = "Olivia",
                            GradeLevel = 2,
                            LastName = "Davis",
                            Major = 1,
                            SchoolId = 3
                        },
                        new
                        {
                            StudentId = 7,
                            FirstName = "Noah",
                            GradeLevel = 1,
                            LastName = "Miller",
                            Major = 0,
                            SchoolId = 1
                        },
                        new
                        {
                            StudentId = 8,
                            FirstName = "Ava",
                            GradeLevel = 0,
                            LastName = "Wilson",
                            Major = 2,
                            SchoolId = 2
                        },
                        new
                        {
                            StudentId = 9,
                            FirstName = "William",
                            GradeLevel = 0,
                            LastName = "Moore",
                            Major = 3,
                            SchoolId = 3
                        });
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.City", b =>
                {
                    b.HasOne("GraphQLSample.Model.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.School", b =>
                {
                    b.HasOne("GraphQLSample.Model.Entities.City", "City")
                        .WithMany("Schools")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.Student", b =>
                {
                    b.HasOne("GraphQLSample.Model.Entities.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.City", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GraphQLSample.Model.Entities.School", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
